/******************************************************************************************************************************
Apex Class Name  : SECAPIScanController
Version          : 1.0 
Created Date     : 14/04/2021
Function         : 

Modification Log :
* Developer                       Date                 Description
* -----------------------------------------------------------------------------------------------------------------------------------------------------------------------                
* Vaibhav Tripathi               04/03/2021          This controller call from Aura component and used to do SEC api 3 different sequential callouts for checkmarx scan.
* Krishna Prasad               	 06/26/2023          Adding New Headers along with SECAPI 2.0 Upgrades
* Krishna Prasad               	 09/19/2023          Adding API Key Validation
***************************************************************************************************************************************************************************/
public with sharing class SecAPIScanController {
    
    /*
*Post - https://humana-sparq-appsecapi-gateway-east2-qa.azurewebsites.net/api/v2/sast/scan/report/pdf/85195574-6df5-4222-8aa1-9f4d98fa0a0f/a6a39654-92f8-46aa-bb40-0ddfbfbbafa6 
* request - {"repoBranchToScan": "refs/heads/feature/US-0014996","incremental": True,"force": false}
* response - {"statusUrl": "https://humana-sparq-appsecapi-gateway-east2-qa.azurewebsites.net/api/v2/sast/scan/status/8e023c69-a465-4eb8-9ced-e34a963f0482/6148bb47-402e-4058-a2e2-0cedc74f05c1"} 

*/
    public class customException extends Exception{}
    
    @AuraEnabled
    public Static copado__User_Story__c getUserStoryDetails(String copadoUserStoryId) {
        string cpuid = EncodingUtil.urlEncode(copadoUserStoryId, 'UTF-8');
        if(copadoUserStoryId != null && Schema.sObjectType.copado__User_Story__c.isAccessible() && Schema.sObjectType.copado__User_Story__c.fields.copado__Has_Apex_Code__c.isAccessible() && Schema.sObjectType.copado__User_Story__c.fields.Name.isAccessible() && Schema.sObjectType.copado__User_Story__c.fields.copado__User_Story_Title__c.isAccessible() && Schema.sObjectType.copado__User_Story__c.fields.SEC_API_Scan_Status__c.isAccessible() && Schema.sObjectType.copado__User_Story__c.fields.copado__Project__c.isAccessible() && Schema.sObjectType.copado__User_Story__c.fields.OwnerId.isAccessible() ){
            copado__User_Story__c cUS = new copado__User_Story__c();
            cUS = [SELECT Id,SecAPI_Scan_Id__c ,copado__Metadata_Types_in_Selection__c,Name,copado__User_Story_Title__c,Result_Id__c,Orphan_Branch_Status__c,copado__Has_Apex_Code__c,copado__Project__r.Name,Owner.Name,SEC_API_Scan_Status__c,SecAPI_Scan_Passed__c FROM copado__User_Story__c where Id =:cpuid];
            return cUS;
        }
        else 
            throw new AuraHandledException('Users do not have appropriate access');
        
    }
    
    @AuraEnabled
    public Static boolean getUserAPIKeyDetails() {
        boolean isValidApiKey = false;
        if(Schema.sObjectType.copado__Personal_Settings__c.isAccessible() && Schema.sObjectType.copado__Personal_Settings__c.fields.copado__API_Key__c.isAccessible()){
            List<copado__Personal_Settings__c> cPS = [SELECT copado__API_Key__c FROM copado__Personal_Settings__c where SetupOwnerId =: UserInfo.getUserId()];
            return cPS.size()>0;
        }
        else 
            throw new AuraHandledException('Users do not have API Key access');
    }
    
    public static List<SEC_API_Scan_Result__c> getScanResultRecord(String copadoUserStoryId){
        List<SEC_API_Scan_Result__c> secResList =  new  List<SEC_API_Scan_Result__c>();
        if(copadoUserStoryId != null && Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Status__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.FailScan__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Critical__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.High__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Medium__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Low__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Type__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Req_Id__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Status_Url__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Json_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.pdf_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.xml_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Score_Card__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Last_Updated__c.isAccessible()){
            secResList = [select Id,Copado_User_Story__r.Result_Id__c,Scan_Status__c,FailScan__c,Critical__c,High__c,Medium__c,Low__c,Scan_Type__c,Req_Id__c,Status_Url__c,Json_Report__c,pdf_Report__c,xml_Report__c,Score_Card__c,Last_Updated__c from SEC_API_Scan_Result__c where Copado_User_Story__c =:copadoUserStoryId order by createddate desc limit 1];
        }
        return secResList;
    }
    
    @AuraEnabled
    public static String fetchScanStatus(String usId){
        String statusUrl = '';
        List<SEC_API_Scan_Result__c> secResList = getScanResultRecord(usId);  
        if(!secResList.isEmpty()){
            statusUrl = secResList[0].status_URL__c;
        }
        return statusUrl;
    }
    
    @AuraEnabled
    public static String updateScanStatus(String copadoUserStoryId, String orphanBranchStatus){
        if(copadoUserStoryId!=null && Schema.sObjectType.copado__User_Story__c.isUpdateable()){
            update new copado__User_Story__c(id=copadoUserStoryId, Orphan_Branch_Status__c=orphanBranchStatus);
        }
        return copadoUserStoryId;
    }
    
    @AuraEnabled
    public static String secAPIScan(String copadoUserStoryId) {
        String statusURL ='';
        String appReqId = '';
        String resp = '';
        String excludeFiles = '';
        String excludeFolders = '';
        
        List<copado__User_Story__c> toUpdateUserStories = new List<copado__User_Story__c>();
        String userStoryId = copadoUserStoryId;
        SEC_API_Scan_Result__c sr = new SEC_API_Scan_Result__c();
        List<copado__User_Story__c> lstUserStory = [select id,copado__Project__r.SecAPI_Orphan_App_Id__c,Name, copado__Has_Apex_Code__c,copado__Project__r.Exclude_Files__c,copado__Project__r.Exclude_Folders__c from copado__User_Story__c where Id =:  copadoUserStoryId limit 1];
        
        String appId = lstUserStory[0].copado__Project__r.SecAPI_Orphan_App_Id__c;
        String userStoryNumber = lstUserStory[0].Name;
        String reqBody = '';
        HTTPResponse res = new HTTPResponse();
        String endURL = '/start/'+appId;
        
        try{
            excludeFiles = lstUserStory[0].copado__Project__r.Exclude_Files__c;
            excludeFolders = lstUserStory[0].copado__Project__r.Exclude_Folders__c;  
            //reqBody = '{"repoBranchToScan": "refs/heads/feature-'+ userStoryNumber + '","incremental": true,"force": false,"excludeFoldersPattern": "'+excludeFolders+'","excludeFilesPattern": "'+excludeFiles+'"}';
            reqBody = '{"repoBranchToScan": "refs/heads/orphan/feature-'+ userStoryNumber + '","incremental": true,"force": false,"excludeFoldersPattern": "'+excludeFolders+'","excludeFilesPattern": "'+excludeFiles+'"}';
            system.debug('reqBody : '+reqBody);
            res = getCalloutResponse(endURL,'POST',reqBody);
            system.debug('@@@'+res);
            if(res != null && res.getStatusCode() == 202){
                
                // Parse JSON response to get the statusUrl field values.
                JSONParser parser = JSON.createParser(res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'statusUrl')) {
                            parser.nextToken();
                            // Get the value.
                            statusURL = parser.getText();
                        }
                }
                if(!String.isEmpty(statusUrl)){
                    appReqId = statusUrl.substringAfter('status/');
                    if(appReqId.length() > 0 && appReqId.contains('/')){
	                	toUpdateUserStories.add(new copado__User_Story__c(Id=userStoryId,SEC_API_Scan_Status__c='In-Progress', SecAPI_Scan_Id__c = appReqId.split('/')[1])); 
                    }
                }else{
					toUpdateUserStories.add(new copado__User_Story__c(Id=userStoryId,SEC_API_Scan_Status__c='In-Progress')); 
                }
                
                sr.status_URL__c = appReqId;
                sr.Copado_User_Story__c = userStoryId;
                sr.Scan_Status__c = 'Callout 1 Completed';
                sr.SecAPI_Scan_Id__c = appReqId.split('/')[1];
                resp = appReqId;
            }
            else{
                sr.Copado_User_Story__c = userStoryId;
                sr.Scan_Status__c = 'Callout 1 Failed';
                sr.Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                toUpdateUserStories.add(new copado__User_Story__c(Id=userStoryId,SEC_API_Scan_Status__c='Completed'));  
                resp = 'Error occured during 1st Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
            }
            if(!toUpdateUserStories.isEmpty() && Schema.sObjectType.copado__User_Story__c.isUpdateable()){
                update toUpdateUserStories;
            }
            if(Schema.sObjectType.copado__User_Story__c.isUpdateable()){
                update lstUserStory[0];
            }
            List<SEC_API_Scan_Result__c> lstSecScanResults =  new List<SEC_API_Scan_Result__c>{sr};
                if(!lstSecScanResults.isEmpty() && Schema.sObjectType.SEC_API_Scan_Result__c.isCreateable()){
                       insert lstSecScanResults;
                }
        }catch(Exception e){
            //system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during 1st Callout. Exception Cause : ' +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : ' + e.getMessage());
        }
        return resp;
    }
    
    
    @AuraEnabled
    public Static String runSecAPIStatusCheck(String statusURL,String usId) {
        String currentStatus = '';
        String jsonReport = '';
        String pdfReport = '';
        String xmlReport = '';
        String scoreCard = '';
        String message = '';
        String submitedDateTime = '';
        SEC_API_Scan_Result__c sr = new SEC_API_Scan_Result__c();
        List<copado__User_Story__c> toUpdateUserStories = new List<copado__User_Story__c>();
        
        HTTPResponse res = new HTTPResponse();
        String endUrl =  '/status/'+statusURL;
        try{
            List<SEC_API_Scan_Result__c> secResList = getScanResultRecord(usId);
            res =  getCalloutResponse(endURL,'GET',null);
            system.debug('res : '+ res);
            system.debug('res body : '+ res.getBody());
            if(res != null && res.getStatusCode() == 200){
                JSONParser parser = JSON.createParser(res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'status')) {
                            parser.nextToken();
                            currentStatus = parser.getText();
                        }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'jsonReport')) {
                                 parser.nextToken();
                                 jsonReport = parser.getText();
                             } 
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'pdfReport')) {
                                 parser.nextToken();
                                 pdfReport = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'xmlReport')) {
                                 parser.nextToken();
                                 xmlReport = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'scoreCard')) {
                                 parser.nextToken();
                                 scoreCard = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'submitedDateTime')) {
                                 parser.nextToken();
                                 submitedDateTime = parser.getText();
                             } 
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'message')) {
                                 parser.nextToken();
                                 message = parser.getText();
                             }
                }
                
                if(!secResList.isEmpty()){
                    secResList[0].Json_Report__c  = jsonReport;
                    secResList[0].Pdf_Report__c  = pdfReport;
                    secResList[0].Xml_Report__c  = xmlReport;
                    secResList[0].Score_Card__c  = scoreCard;
                    if(submitedDateTime != null && String.isNotEmpty(submitedDateTime))
                        secResList[0].Submitted_Date__c  = convertStringtoDateTime(submitedDateTime);
                    secResList[0].Error_Message__c  = message;
                    
                    if(currentStatus == 'FINISHED'){
                        secResList[0].Scan_Status__c = 'Callout 2 Completed';
                    }
                    else if(currentStatus == 'ERROR' || currentStatus == 'CANCELED' || currentStatus == 'FAILED'){
                        secResList[0].Scan_Status__c = 'Callout 2 Failed';
                        toUpdateUserStories.add(new copado__User_Story__c(Id=usId,SEC_API_Scan_Status__c='Completed'));
                    }
                    
                }
            }
            else{
                secResList[0].Scan_Status__c = 'Callout 2 Failed';
                secResList[0].Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                toUpdateUserStories.add(new copado__User_Story__c(Id=usId,SEC_API_Scan_Status__c='Completed'));
                currentStatus = 'Error occured during 2nd Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
            }
            
            if(Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                update secResList;
            }
            if(!toUpdateUserStories.isEmpty() && Schema.sObjectType.copado__User_Story__c.isUpdateable()){
                update toUpdateUserStories;
            }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during 2nd Callout. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : ' + e.getMessage());
            
        }
        return currentStatus;
    }
    
    @AuraEnabled
    public Static String getSECAPIScoreCard(String scoreCardURL, String userStoryId) {
        Boolean failScan;
        String scanType ='';
        String resp = '';
        SECAPIParser scparser;
        SEC_API_Scan_Result__c sr;
        String endUrl = '/score/'+scoreCardURL;
        List<copado__User_Story__c> toUpdateUserStories = new List<copado__User_Story__c>();
        HTTPResponse res = new HTTPResponse();
        try{
            res =  getCalloutResponse(endURL,'GET',null);
            List<SEC_API_Scan_Result__c> srList = getScanResultRecord(userStoryId);
            
            if(res.getStatusCode() == 200){
                scparser = (SECAPIParser)JSON.deserialize(res.getBody(), SECAPIParser.class);
                if(!srList.isEmpty()){
                    sr = srList[0];
                    sr.FailScan__c = scparser.failScan;
                    sr.Critical__c = scparser.critical!=null?Decimal.valueOf(scparser.critical):0;
                    sr.High__c = scparser.high!=null?Decimal.valueOf(scparser.high):0;
                    sr.Medium__c = scparser.medium!=null?Decimal.valueOf(scparser.medium):0;
                    sr.Low__c = scparser.low!=null?Decimal.valueOf(scparser.low):0;
                    sr.Copado_User_Story__c = userStoryId;
                    sr.Scan_Type__c = scparser.scanType;
                    sr.Req_Id__c = scparser.reqId;
                    sr.Scan_Status__c = 'Callout 3 Completed';
                    if(scparser.lastUpdated != null && scparser.lastUpdated != '')
                        sr.Last_Updated__c = convertStringtoDateTime(scparser.lastUpdated);
                }
            }
            
            else{
                if(!srList.isEmpty()){
                    sr = srList[0];
                    sr.Scan_Status__c = 'Callout 3 Failed';
                    sr.Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                    resp = 'Error occured during 3rd Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                }
            }
            if(sr != null && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                update sr;
            }
            copado__User_Story__c us = new copado__User_Story__c(Id=userStoryId,SEC_API_Scan_Status__c='Completed');
            
            //check the checkbox only if there are no High and medium security violations
                               if(sr.High__c==0 && sr.Medium__c==0){
                       us.SecAPI_Scan_Passed__c  = true;
                   }
                   else{
                       us.SecAPI_Scan_Passed__c  = false;
                   
               }
            toUpdateUserStories.add(us);
            if(!toUpdateUserStories.isEmpty() && Schema.sObjectType.copado__User_Story__c.isUpdateable()){
                   update toUpdateUserStories;
            }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during 3rd Callout. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
            
        }
        return resp;
    }
    
    Public Static DateTime convertStringtoDateTime(String dat){
        Map<String,Integer> monthMap = new Map<String,Integer>{'January' => 1,  'February' => 2,  'March' => 3,  'April' => 4,  'May' => 5,  'June' => 6,  'July' => 7,  'August' => 8,  'September' => 9,  'October' => 10,  'November' => 11,  'December' => 12};
            DateTime dt1;       
        try{
            String[] myDateOnly = dat.split(',');
            String myDateStr = myDateOnly[1].replaceAll(' ',','); 
            String[] strDate = myDateStr.split(',');
            Integer myIntDate = integer.valueOf(strDate[1]);
            Integer myIntMonth = monthMap.get(strDate[2]);
            Integer myIntYear = integer.valueOf(strDate[3]);
            String mytime = strDate[4];
            String dt = myIntYear + '-' + myIntMonth + '-' + myIntDate + ' ' + myTime;
            
            dt1 = datetime.valueOfGmt(dt);
        }
        catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
        }
        return dt1;
    }
    public static HttpResponse getCalloutResponse(String endPointUrl, String requestType, String requestBody){
        HTTPResponse res = new HTTPResponse();
        HttpRequest req = new HttpRequest();
        try{
            if(requestType == 'GET'){
                req.setMethod('GET');
            }
            else if(requestType == 'POST'){
                req.setMethod('POST');
                req.setBody(requestBody);
            }
            req.setEndpoint('callout:SecAPIScan' + endPointUrl);
            req.setHeader('X-Api-Key', '{!$Credential.Password}'); //1c4b2765-369c-4fac-a6dc-abfe93dcdbaa
            req.setHeader('Content-Type','application/json');
            req.setHeader('userName', '{!$Credential.Username}');
            req.setHeader('EnterpriseSuite', Label.EnterpriseSuite);
            req.setHeader('EnterpriseValue', Label.EnterpriseValue);
            Http http = new Http();
            res = http.send(req);            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new customException('Error occured during HTTP callout. Exception Cause : ' + e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
        }
        return res;
    }
    public class SECAPIParser{
        public String medium{get;set;}
        public String high{get;set;}
        public String low{get;set;}
        public String critical{get;set;}
        public String reqId{get;set;}
        public String scanType{get;set;}
        public String lastUpdated{get;set;}
        public Boolean failScan{get;set;}
    }
}
