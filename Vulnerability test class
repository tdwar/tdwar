@isTest
public class VulnerabilityScannerTest {
    @isTest
    static void testScanWithCriticalVulnerability() {
        // Create test user story
        copado__User_Story__c userStory = new copado__User_Story__c(
            Name = 'Test User Story',
            SCA_Scan_Status__c = 'Pending'
        );
        insert userStory;

        // Execute the scan
        Test.startTest();
        String result = VulnerabilityScanner.scanForCriticalVulnerabilities(userStory.Id);
        Test.stopTest();

        // Validate the results
        copado__User_Story__c updatedUserStory = [
            SELECT SCA_Scan_Status__c FROM copado__User_Story__c WHERE Id = :userStory.Id
        ];
        System.assertEquals('Critical Vulnerability Found', updatedUserStory.SCA_Scan_Status__c);
        System.assert(result.contains('Scan completed for User Story: Test User Story'));
    }

    @isTest
    static void testScanWithoutCriticalVulnerability() {
        // Modify simulateVulnerabilityScan to simulate no critical vulnerabilities
        VulnerabilityScanner.simulateVulnerabilityScan = () => '{"vulnerabilities": []}';

        // Create test user story
        copado__User_Story__c userStory = new copado__User_Story__c(
            Name = 'Test User Story 2',
            SCA_Scan_Status__c = 'Pending'
        );
        insert userStory;

        // Execute the scan
        Test.startTest();
        String result = VulnerabilityScanner.scanForCriticalVulnerabilities(userStory.Id);
        Test.stopTest();

        // Validate the results
        copado__User_Story__c updatedUserStory = [
            SELECT SCA_Scan_Status__c FROM copado__User_Story__c WHERE Id = :userStory.Id
        ];
        System.assertEquals('No Vulnerabilities Found', updatedUserStory.SCA_Scan_Status__c);
        System.assert(result.contains('Scan completed for User Story: Test User Story 2'));
    }

    @isTest
    static void testScanWithInvalidUserStoryId() {
        Test.startTest();
        try {
            VulnerabilityScanner.scanForCriticalVulnerabilities('InvalidId');
            System.assert(false, 'Expected exception for invalid User Story ID');
        } catch (Exception e) {
            System.assert(e.getMessage().contains('User Story not found.'));
        }
        Test.stopTest();
    }
}
